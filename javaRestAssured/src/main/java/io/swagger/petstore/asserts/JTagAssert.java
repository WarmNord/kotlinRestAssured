package io.swagger.petstore.asserts;

import io.swagger.petstore.models.JTag;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;


/**
 * {@link JTag} specific assertions - Generated by CustomAssertionGenerator.
 */
public class JTagAssert extends AbstractAssert<JTagAssert, JTag> {

    /**
     * Creates a new <code>{@link JTagAssert}</code> to make assertions on actual JTag.
     *
     * @param actual the JTag we want to make assertions on.
     */
    public JTagAssert(JTag actual) {
        super(actual, JTagAssert.class);
    }

    /**
     * An entry point for JTagAssert to follow AssertJ standard <code>assertThat()</code>
     * statements.<br> With a static import, one can write directly: <code>assertThat(myJTag)</code>
     * and get specific assertion with code completion.
     *
     * @param actual the JTag we want to make assertions on.
     * @return a new <code>{@link JTagAssert}</code>
     */
    public static JTagAssert assertThat(JTag actual) {
        return new JTagAssert(actual);
    }

    /**
     * Verifies that the actual JTag's id is equal to the given one.
     *
     * @param id the given id to compare the actual JTag's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JTag's id is not equal to the given one.
     */
    public JTagAssert hasId(int id) {
        // check that actual JTag we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual JTag's name is equal to the given one.
     *
     * @param name the given name to compare the actual JTag's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JTag's name is not equal to the given one.
     */
    public JTagAssert hasName(String name) {
        // check that actual JTag we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

}
