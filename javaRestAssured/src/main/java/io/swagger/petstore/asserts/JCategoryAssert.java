package io.swagger.petstore.asserts;

import io.swagger.petstore.models.JCategory;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;


/**
 * {@link JCategory} specific assertions - Generated by CustomAssertionGenerator.
 */
public class JCategoryAssert extends AbstractAssert<JCategoryAssert, JCategory> {

    /**
     * Creates a new <code>{@link JCategoryAssert}</code> to make assertions on actual JCategory.
     *
     * @param actual the JCategory we want to make assertions on.
     */
    public JCategoryAssert(JCategory actual) {
        super(actual, JCategoryAssert.class);
    }

    /**
     * An entry point for JCategoryAssert to follow AssertJ standard <code>assertThat()</code>
     * statements.<br> With a static import, one can write directly: <code>assertThat(myJCategory)</code>
     * and get specific assertion with code completion.
     *
     * @param actual the JCategory we want to make assertions on.
     * @return a new <code>{@link JCategoryAssert}</code>
     */
    public static JCategoryAssert assertThat(JCategory actual) {
        return new JCategoryAssert(actual);
    }

    /**
     * Verifies that the actual JCategory's id is equal to the given one.
     *
     * @param id the given id to compare the actual JCategory's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JCategory's id is not equal to the given one.
     */
    public JCategoryAssert hasId(int id) {
        // check that actual JCategory we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual JCategory's name is equal to the given one.
     *
     * @param name the given name to compare the actual JCategory's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JCategory's name is not equal to the given one.
     */
    public JCategoryAssert hasName(String name) {
        // check that actual JCategory we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

}
