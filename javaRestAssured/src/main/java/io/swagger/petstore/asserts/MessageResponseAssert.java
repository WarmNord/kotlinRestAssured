package io.swagger.petstore.asserts;

import io.swagger.petstore.jEntities.JMessageResponse;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link JMessageResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MessageResponseAssert extends AbstractAssert<MessageResponseAssert, JMessageResponse> {

  /**
   * Creates a new <code>{@link MessageResponseAssert}</code> to make assertions on actual JMessageResponse.
   * @param actual the JMessageResponse we want to make assertions on.
   */
  public MessageResponseAssert(JMessageResponse actual) {
    super(actual, MessageResponseAssert.class);
  }

  /**
   * An entry point for JMessageResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myJMessageResponse)</code> and get specific assertion with code completion.
   * @param actual the JMessageResponse we want to make assertions on.
   * @return a new <code>{@link MessageResponseAssert}</code>
   */
  public static MessageResponseAssert assertThat(JMessageResponse actual) {
    return new MessageResponseAssert(actual);
  }

  /**
   * Verifies that the actual JMessageResponse's code is equal to the given one.
   * @param code the given code to compare the actual JMessageResponse's code to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JMessageResponse's code is not equal to the given one.
   */
  public MessageResponseAssert hasCode(int code) {
    // check that actual JMessageResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting code of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualCode = actual.getCode();
    if (actualCode != code) {
      failWithMessage(assertjErrorMessage, actual, code, actualCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JMessageResponse's message is equal to the given one.
   * @param message the given message to compare the actual JMessageResponse's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JMessageResponse's message is not equal to the given one.
   */
  public MessageResponseAssert hasMessage(String message) {
    // check that actual JMessageResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JMessageResponse's type is equal to the given one.
   * @param type the given type to compare the actual JMessageResponse's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JMessageResponse's type is not equal to the given one.
   */
  public MessageResponseAssert hasType(String type) {
    // check that actual JMessageResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
